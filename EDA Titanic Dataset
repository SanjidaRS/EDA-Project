#Data Import and Exploration
#Libraries Used
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

#Loading the Dataset
df = pd.read_csv('C:/Users/ASUS/Downloads/Pandas+Course+Files/Datasets/titanic.csv')
df
df.head()
df.isnull()

#Data Visualization
#Visualizing Missing Data
#in order to visualize missing data, how many null values are present  
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')

#Visualizing Data Distribution
#helps to estimate the total values for specific columns 
sns.set_style('whitegrid')
sns.countplot(x='Survived', data=df)
sns.set_style('whitegrid')
sns.countplot(x='Survived', hue='Sex', data=df, palette='RdBu_r')
sns.set_style('whitegrid')
sns.countplot(x='Survived', hue='Pclass', data=df, palette='rainbow')
sns.displot(df['Age'].dropna(),kde=False,color='darkred',bins=40)  #average of columns in histogram
df['Age'].hist(bins=30, color='darkred', alpha=0.3)
sns.countplot(x='SibSp', data=df)
df['Fare'].hist(color='green', bins=40, figsize=(8,4))

#Data Cleaning
#Handling Missing Values
plt.figure(figsize=(12,7))
sns.boxplot(x='Pclass', y='Age', data=df, palette='winter')
#fucntion for cleaning data
def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):
       if Pclass == 1:
         return 37

       elif Pclass == 2:
         return 29

       else:
         return 24
    else:
        return Age

df['Age'] = df[['Age', 'Pclass']].apply(impute_age, axis=1)
sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap='viridis')
df.drop('Cabin', axis=1, inplace=True)
df.head()
df.dropna(True)
df.info()
pd.get_dummies(df['Embarked'], drop_first=True).head()

#Feature Engineering
#Creating Dummy Variables
sex= pd.get_dummies(df['Sex'], drop_first=True)
embark = pd.get_dummies(df['Embarked'], drop_first=True)
df.drop(['Sex', 'Embarked', 'Name', 'Ticket'], axis=1, inplace=True)
df.head()
df = pd.concat([df,sex,embark], axis=1)
df.head()


#BUILDING A LOGISTIC REGRESSION MODEL
df.drop('Survived', axis=1).head()
df['Survived'].head()
from sklearn.model_selection import train_test_split
x_df, x_test, y_df, y_test = train_test_split(df.drop('Survived', axis=1), df['Survived'], test_size=0.30, random_state=101)
from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression()
logmodel.fit(X_train, y_train)
predictions = logmodel.predict(X_test)
from sklearn.metrics import confusion_matrix
accuracy = confusion_matrix(y_test, predictions)
accuracy
from sklearn.matrix import accuracy_score
accuracy = confusion_matrix(y_test, predictions)
accuracy
predictions





